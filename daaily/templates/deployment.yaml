{{- if .Values.deployment.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s" .Release.Name | trunc 63 }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ printf "%s" .Release.Name | trunc 63 }}
  template:
    metadata:
      labels:
        app: {{ printf "%s" .Release.Name | trunc 63 }}
    spec:
      restartPolicy: Always
      containers:
      - name: {{ printf "%s" .Release.Name | trunc 63 }}
        image: {{required "required container image parameter." .Values.image.repo }}:{{ .Values.image.tag }}
        command: ["uvicorn"]
        args: ["app.main:app", "--host", "0.0.0.0", "--port", "80","--workers", "4"]
        imagePullPolicy: {{required "required container imagePullPolicy parameter." .Values.image.imagePullPolicy }}
        livenessProbe:
          httpGet:
            path: {{required "required httpGet path parameter." .Values.deployment.healthcheck.path }}
            port: {{required "required httpGet port parameter." .Values.deployment.healthcheck.port }}
          initialDelaySeconds: {{required "required liveness/readiness initialDelaySeconds parameter." .Values.deployment.healthcheck.initialDelaySeconds }}
          timeoutSeconds: {{required "required liveness/readiness timeoutSeconds parameter." .Values.deployment.healthcheck.timeoutSeconds }}
          successThreshold: {{required "required liveness/readiness successThreshold parameter." .Values.deployment.healthcheck.successThreshold }}
          failureThreshold: {{required "required liveness/readiness failureThreshold parameter." .Values.deployment.healthcheck.failureThreshold }}
        # tells to k8s if the pod is ready to receive traffic
        readinessProbe:
          httpGet:
            path: {{required "required httpGet path parameter." .Values.deployment.healthcheck.path }}
            port: {{required "required httpGet port parameter." .Values.deployment.healthcheck.port }}
          initialDelaySeconds: {{required "required liveness/readiness initialDelaySeconds parameter." .Values.deployment.healthcheck.initialDelaySeconds }}
          timeoutSeconds: {{required "required liveness/readiness timeoutSeconds parameter." .Values.deployment.healthcheck.timeoutSeconds }}
          successThreshold: {{required "required liveness/readiness successThreshold parameter." .Values.deployment.healthcheck.successThreshold }}
          failureThreshold: {{required "required liveness/readiness failureThreshold parameter." .Values.deployment.healthcheck.failureThreshold }}
        env:
        {{- range $key, $value := $.Values.env_variables}}
        - name: {{ $key | trim }}
          value: {{ $value | trim }}
        {{- end }}
        ports:
        - name: {{ .Values.deployment.containers.containerPort_name }}
          protocol: {{ .Values.deployment.containers.containerProtocol }}
          containerPort: {{ .Values.deployment.containers.containerPort }}
        resources:
          requests:
            memory: {{required "required resources request [memory] parameter." .Values.resource_defaults.requests.request_mem }}
            cpu: {{required "required resources request [cpu] parameter." .Values.resource_defaults.requests.request_cpu }}
          limits:
            memory: {{required "required resources limits [memory] parameter." .Values.resource_defaults.limits.limits_mem }}
            cpu: {{required "required resources limits [cpu] parameter." .Values.resource_defaults.limits.limits_cpu }}

{{- end -}}
